# yaml-language-server: $schema=https://golangci-lint.run/jsonschema/golangci.jsonschema.json

version: "2"
run:
  modules-download-mode: readonly
  timeout: 10m
output:
  formats:
    text:
      path: stdout
      colors: false
linters:
  default: none
  enable:
    - asciicheck # checks for non-ASCII identifiers
    - bidichk # checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully.
    - copyloopvar # checks for pointers to enclosing loop variables.
    - cyclop # calculates cyclomatic complexities of functions or packages
    - dogsled # finds assignments/declarations with too many blank identifiers
    - durationcheck # detect cases where two time.Duration values are being multiplied in possibly erroneous ways
    - err113 # checks the errors handling expressions.
    - errcheck # finds unchecked errors
    - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exhaustive # check exhaustiveness of enum switch statements.
    - forcetypeassert # finds forced type assertions.
    - gocognit # calculates cognitive complexities of functions
    - gocritic # provides diagnostics that check for bugs, performance and style issues.
    - gomoddirectives # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard # allow and block list linter for direct Go module dependencies.
    - goprintffuncname # checks that printf-like functions are named with f at the end.
    - gosec # inspects source code for security problems.
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string.
    - importas # enforces consistent import aliases.
    - ineffassign # detects when assignments to existing variables are not used.
    - makezero # finds slice declarations with non-zero initial length.
    - misspell # finds commonly misspelled English words in comments.
    - nakedret # finds naked returns in functions greater than a specified function length.
    - nilerr # finds the code that returns nil even if it checks that the error is not nil.
    - noctx # finds sending http request without context.Context.
    - nolintlint # reports ill-formed or insufficient nolint directives.
    - prealloc # finds slice declarations that could potentially be pre-allocated.
    - predeclared # finds code that shadows one of Go's predeclared identifiers.
    - promlinter # check Prometheus metrics naming via promlint.
    - revive # linter for Go. Drop-in replacement of golint.
    - rowserrcheck # checks whether Err of rows is checked successfully.
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed.
    - staticcheck # set of rules from staticcheck
    - thelper # detects Go test helpers without t.Helper() call and checks the consistency of test helpers.
    - unconvert # removes unnecessary type conversions.
    - unparam # reports unused function parameters.
    - unused # checks Go code for unused constants, variables, functions and types.
    - usetesting # detects using os.Setenv instead of t.Setenv since Go1.17.
    - wastedassign # finds wasted assignment statements.
    - whitespace # detection of leading and trailing whitespace.

  settings:
    cyclop:
      max-complexity: 20
    gocritic:
      enabled-tags:
        - performance
    govet:
      enable:
        - shadow
    revive:
      severity: warning
      directives:
        - name: specify-disable-reason
          severity: error
      rules:
        - name: blank-imports
        - name: context-as-argument
        - name: context-keys-type
        - name: dot-imports
        - name: error-return
        - name: error-strings
        - name: error-naming
        - name: exported
          arguments:
            - disableStutteringCheck
        - name: if-return
        - name: increment-decrement
        - name: var-naming
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: time-naming
        - name: indent-error-flow
        - name: errorf
        - name: empty-block
        - name: superfluous-else
        - name: unused-parameter
        - name: unreachable-code
        - name: redefines-builtin-id
        - name: indent-error-flow
          severity: warning
        - name: add-constant
          arguments:
            - allowFloats: 0.0,0.,1.0,1.,2.0,2.
              allowInts: 0,1,2,3,10
              allowStrs: '"","error","user_id","subscription_id","idp-%s"'
              maxLitCount: "3"
          severity: warning
    staticcheck:
      checks:
        - all
        - -QF1011 # disable could omit type int from declaration; it will be inferred from the right-hand side (var a int = 0)

  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      - linters:
          - bodyclose
          - err113
          - gosec
        path: (.+)_test\.go
      - linters:
          - revive
        path: (.+)_test\.go
        text: ^add-constant:.*
      - linters:
          - revive
        path: app/config/settings/settings\.go
        text: ^add-constant:.*
      # Additional exclusions for test files
      - linters:
          - errcheck
          - cyclop
          - gocognit
          - forcetypeassert
          - usetesting
        path: (.+)_test\.go
      - linters:
          - revive
        path: (.+)_test\.go
        text: ^unused-parameter:.*
      - linters:
          - revive
        path: (.+)_test\.go
        text: ^context-keys-type:.*
      - linters:
          - staticcheck
        path: (.+)_test\.go
        text: ^SA5011:.*
      - linters:
          - errorlint
        path: (.+)_test\.go
    paths:
      - third_party$
      - builtin$
      - examples$

formatters:
  enable:
    - gci # gci controls Go package import order and makes it always deterministic.
    - gofmt # checks for formatting
    - golines # A golang formatter that fixes long lines
    - goimports # check import statements are formatted according to the 'goimport' command
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
  settings:
    golines: # A golang formatter that fixes long lines
      # Target maximum line length.
      # Default: 100
      max-len: 120
      # Length of a tabulation.
      # Default: 4
      tab-len: 4
      # Shorten single-line comments.
      # Default: false
      shorten-comments: false
      # Default: true
      reformat-tags: false
      # Split chained methods on the dots as opposed to the arguments.
      # Default: true
      chain-split-dots: false
